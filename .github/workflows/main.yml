name: Build, Push and Deploy Docker Images - CNAPP demo (BP)

on: push

env:
  FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }}
  FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
  FALCON_CLOUD_REGION: ${{ secrets.FALCON_CLOUD_REGION }}

jobs:
  build-scan-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Scan Root Dockerfile
      uses: CrowdStrike/container-image-scan@v1
      with:
        image: root-image:latest
        falcon-client-id: ${{ secrets.FALCON_CLIENT_ID }}
        falcon-client-secret: ${{ secrets.FALCON_CLIENT_SECRET }}
        falcon-cloud-region: ${{ secrets.FALCON_CLOUD_REGION }}
        json-report: root-image-scan-report.json

    - name: Check Docker Hub repositories, build/push images, and scan with Falcon
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        
        for dir in src/*/; do
          if [ -f "$dir/Dockerfile" ]; then
            service_name=$(basename "$dir")
            
            echo "Processing service: $service_name"
            
            if [ "$service_name" == "cartservice" ] || echo "$CHANGED_FILES" | grep -q "$dir" || ! docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/$service_name:latest > /dev/null 2>&1; then
              echo "Building Docker image for $service_name."
              
              docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service_name:latest "$dir"
              
              echo "Scanning Docker image for $service_name."
              docker run --rm -e FALCON_CLIENT_ID -e FALCON_CLIENT_SECRET \
                -v /var/run/docker.sock:/var/run/docker.sock \
                quay.io/crowdstrike/container-image-scan:latest \
                --repo ${{ secrets.DOCKERHUB_USERNAME }}/$service_name \
                --tag latest \
                --cloud-region $FALCON_CLOUD_REGION \
                --json-report scan-report-$service_name.json
              
              scan_result=$?
              
              if [ $scan_result -eq 0 ]; then
                echo "Image scan passed for $service_name. Pushing to Docker Hub."
                docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service_name:latest
                
                sed -i "s|image: .*$service_name.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/$service_name:latest|g" release/kubernetes-manifests.yaml
                
                if [ -f "kubernetes-manifests/${service_name}.yaml" ]; then
                  sed -i "s|image: .*$service_name.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/$service_name:latest|g" "kubernetes-manifests/${service_name}.yaml"
                fi
              else
                echo "Image scan failed for $service_name. Skipping push."
              fi
            else
              echo "No changes detected for $service_name. Skipping build, scan, and push."
            fi
          fi
        done

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name BP-test --region ${{ secrets.AWS_REGION }}

    - name: Apply updated Kubernetes manifests in EKS
      run: |
        kubectl apply -f release/kubernetes-manifests.yaml -n online-boutique --validate=false
        
        for manifest in kubernetes-manifests/*.yaml; do
          kubectl apply -f "$manifest" --validate=false
        done

    - name: Commit and push updates to YAML files
      run: |
        git config --global user.email "binhphan@me.com"
        git config --global user.name "bphansg"
        git add release/kubernetes-manifests.yaml kubernetes-manifests/*.yaml
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update Docker image references in YAML files" && git push)
